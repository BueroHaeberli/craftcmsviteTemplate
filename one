#!/usr/bin/env php
<?php
/**
 * One console file
 */
use yii\helpers\Console;

// Set path constants
define('CRAFT_BASE_PATH', __DIR__);
define('CRAFT_VENDOR_PATH', CRAFT_BASE_PATH.'/vendor');

// Load Composer's autoloader
require_once CRAFT_VENDOR_PATH.'/autoload.php';

// Load dotenv?
if (class_exists('Dotenv\Dotenv') && file_exists(CRAFT_BASE_PATH.'/.env')) {
    $dotenv = Dotenv\Dotenv::create(CRAFT_BASE_PATH);
    $dotenv->load();
}

if (empty($argv[1])) {
    helloWorld();
} else {
    switch ($argv[1]) {
        case 'offline':
            offline();
            break;

        case 'online':
            online();
            break;

        default:
            helloWorld();
            break;
    }
}

/**
 * Display a welcome message
 */
function helloWorld()
{
  outputString(PHP_EOL.'Hello, world!', Console::FG_YELLOW);
}

/**
 * Take site offline
 */
function offline()
{
    global $dotenv;
    outputString('Taking site offline...', Console::FG_YELLOW);
    $dotenv->required('IS_SYSTEM_LIVE')->isBoolean();
    if( ! (bool) getenv('IS_SYSTEM_LIVE')) {
      outputString('Site is already offline', Console::FG_YELLOW);
      return;
    }
    $result = replaceInFile('.env', [
      'IS_SYSTEM_LIVE=1' => [
        'substr' => '',
        'env' => '',
        'default' => 'IS_SYSTEM_LIVE=0'
      ]
    ]);
    if( ! $result) {
      outputString(PHP_EOL.'Unable to complete action', Console::FG_RED);
    }

    outputString('Site is now offline', Console::FG_GREEN);
}

/**
 * Take site online
 */
function online()
{
    global $dotenv;
    outputString('Taking site online...', Console::FG_YELLOW);
    $dotenv->required('IS_SYSTEM_LIVE')->isBoolean();
    if((bool) getenv('IS_SYSTEM_LIVE')) {
      outputString('Site is already online', Console::FG_YELLOW);
      return;
    }
    $result = replaceInFile('.env', [
      'IS_SYSTEM_LIVE=0' => [
        'substr' => '',
        'env' => '',
        'default' => 'IS_SYSTEM_LIVE=1'
      ]
    ]);

    if( ! $result) {
      outputString(PHP_EOL.'Unable to complete action', Console::FG_RED);
    }

    outputString('Site is now online', Console::FG_GREEN);
}

/**
 * Output a string to the console, using optional $args to color it, if supported
 *
 * @param string $string
 *
 * @return mixed
 */
function outputString($string)
{
    $stream = \STDOUT;
    if (Console::streamSupportsAnsiColors($stream)) {
        $args = func_get_args();
        array_shift($args);
        $string = Console::ansiFormat($string, $args);
    }

    return Console::stdout($string.PHP_EOL);
}

/**
 * Replace strings in $filePath and write out the modified file
 *
 * @param string $filePath
 * @param array  $replacements
 */
function replaceInFile(string $filePath, array $replacements)
{
    if (!empty($replacements)) {
        outputString('- setting up '.$filePath);
        $fileContents = file_get_contents($filePath);
        foreach ($replacements as $findValue => $params) {
            $replaceValue = empty($params['env']) ? $params['default'] : getenv($params['env']) ?? $params['default'];
            if (!empty($params['substr'])) {
                $subStr = $params['substr'];
                $wrapChar = '';
                // If the $subStr is quoted, quote the $replaceValue, too
                if ($subStr[0] == "'" || $subStr[0] == '"') {
                    $wrapChar = $subStr[0];
                }
                $replaceValue = str_replace($subStr, $wrapChar.$replaceValue.$wrapChar, $findValue);
            }
            if( ! strpos($fileContents, $findValue)) {
              outputString('- '.$findValue.' not found. No replacement made.', Console::FG_RED);
              return false;
            }
            $fileContents = str_replace($findValue, $replaceValue, $fileContents);
            outputString('- '.$findValue.' is now '.$replaceValue);
        }
        // Write the file out
        file_put_contents($filePath, $fileContents);
    }
    return true;
}
